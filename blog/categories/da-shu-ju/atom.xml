<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 大数据 | 叽歪]]></title>
  <link href="http://trainchou.github.io/blog/categories/da-shu-ju/atom.xml" rel="self"/>
  <link href="http://trainchou.github.io/"/>
  <updated>2014-12-11T16:45:04+08:00</updated>
  <id>http://trainchou.github.io/</id>
  <author>
    <name><![CDATA[zcy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[搜索引擎选择： Elasticsearch与Solr]]></title>
    <link href="http://trainchou.github.io/blog/elasticsearchyu-solr/"/>
    <updated>2014-11-27T15:42:21+08:00</updated>
    <id>http://trainchou.github.io/blog/elasticsearchyu-solr</id>
    <content type="html"><![CDATA[<h1>搜索引擎选型调研文档</h1>

<h2>Elasticsearch简介<a href="http://fuxiaopang.gitbooks.io/learnelasticsearch"><sup>*</sup></a></h2>

<p>Elasticsearch是一个<strong>实时</strong>的<strong>分布式</strong>搜索和分析引擎。它可以帮助你用前所未有的速度去处理大规模数据。</p>

<p>它可以用于<strong>全文搜索</strong>，<strong>结构化搜索</strong>以及<strong>分析</strong>，当然你也可以将这三者进行组合。</p>

<p>Elasticsearch是一个<strong>建立在全文搜索引擎 Apache Lucene&trade; 基础上</strong>的搜索引擎，可以说Lucene是当今最先进，最高效的全功能开源搜索引擎框架。</p>

<p>但是Lucene只是一个框架，要充分利用它的功能，需要使用JAVA，并且在程序中集成Lucene。需要很多的学习了解，才能明白它是如何运行的，Lucene确实非常复杂。</p>

<p>Elasticsearch使用Lucene作为内部引擎，但是在使用它做全文搜索时，只需要使用统一开发好的API即可，而不需要了解其背后复杂的Lucene的运行原理。</p>

<p>当然Elasticsearch并不仅仅是Lucene这么简单，它不但包括了全文搜索功能，还可以进行以下工作:</p>

<ul>
<li><p>分布式实时文件存储，并将每一个字段都编入索引，使其可以被搜索。</p></li>
<li><p>实时分析的分布式搜索引擎。</p></li>
<li><p>可以扩展到上百台服务器，处理PB级别的结构化或非结构化数据。</p></li>
</ul>


<p>这么多的功能被集成到一台服务器上，你可以轻松地通过客户端或者任何你喜欢的程序语言与ES的RESTful API进行交流。</p>

<p>Elasticsearch的<strong>上手是非常简单</strong>的。它附带了很多<strong>非常合理的默认值</strong>，这让初学者很好地避免一上手就要面对复杂的理论，</p>

<p>它安装好了就可以使用了，用<strong>很小的学习成本</strong>就可以变得很有生产力。</p>

<p>随着越学越深入，还可以利用Elasticsearch更多高级的功能，整个引擎可以很灵活地进行配置。可以根据自身需求来定制属于自己的Elasticsearch。</p>

<p>使用案例：</p>

<ul>
<li><p>维基百科使用Elasticsearch来进行全文搜做并高亮显示关键词，以及提供search-as-you-type、did-you-mean等搜索建议功能。</p></li>
<li><p>英国卫报使用Elasticsearch来处理访客日志，以便能将公众对不同文章的反应实时地反馈给各位编辑。</p></li>
<li><p>StackOverflow将全文搜索与地理位置和相关信息进行结合，以提供more-like-this相关问题的展现。</p></li>
<li><p>GitHub使用Elasticsearch来检索超过1300亿行代码。</p></li>
<li><p>每天，Goldman Sachs使用它来处理5TB数据的索引，还有很多投行使用它来分析股票市场的变动。</p></li>
</ul>


<p>但是Elasticsearch并不只是面向大型企业的，它还帮助了很多类似DataDog以及Klout的创业公司进行了功能的扩展。</p>

<h2>Elasticsearch的优缺点<a href="http://stackoverflow.com/questions/10213009/solr-vs-elasticsearch"><sup>*</sup></a><a href="http://huangx.in/22/translation-solr-vs-elasticsearch"><sup>*</sup></a>:</h2>

<h3>优点</h3>

<ol>
<li>Elasticsearch是分布式的。不需要其他组件，分发是实时的，被叫做&#8221;Push replication&#8221;。</li>
<li>Elasticsearch 完全支持 Apache Lucene 的接近实时的搜索。</li>
<li>处理<strong>多租户</strong>（<a href="http://en.wikipedia.org/wiki/Multitenancy">multitenancy</a>）不需要特殊配置，而Solr则需要更多的高级设置。</li>
<li>Elasticsearch 采用 Gateway 的概念，使得完备份更加简单。</li>
<li>各节点组成对等的网络结构，某些节点出现故障时会自动分配其他节点代替其进行工作。</li>
</ol>


<h3>缺点</h3>

<ol>
<li>只有一名开发者（当前Elasticsearch GitHub组织已经不只如此，已经有了相当活跃的维护者）</li>
<li>还不够自动（不适合当前新的Index Warmup API）</li>
</ol>


<h2>Solr简介<a href="http://zh.wikipedia.org/wiki/Solr"><sup>*</sup></a></h2>

<p>Solr（读作“solar”）是Apache Lucene项目的开源企业搜索平台。其主要功能包括<strong>全文检索</strong>、<strong>命中标示</strong>、<strong>分面搜索</strong>、<strong>动态聚类</strong>、<strong>数据库集成</strong>，以及<strong>富文本（如Word、PDF）的处理</strong>。Solr是<strong>高度可扩展</strong>的，并提供了<strong>分布式搜索和索引复制</strong>。Solr是<strong>最流行的企业级搜索引擎</strong>，Solr4 还增加了NoSQL支持。</p>

<p>Solr是用Java编写、运行在Servlet容器（如 Apache Tomcat 或Jetty）的一个独立的全文搜索服务器。 Solr采用了 Lucene Java 搜索库为核心的全文索引和搜索，并具有类似REST的HTTP/XML和JSON的API。Solr强大的外部配置功能使得无需进行Java编码，便可对其进行调整以适应多种类型的应用程序。Solr有一个插件架构，以支持更多的高级定制。</p>

<p>因为2010年 Apache Lucene 和 Apache Solr 项目合并，两个项目是由同一个Apache软件基金会开发团队制作实现的。提到技术或产品时，Lucene/Solr或Solr/Lucene是一样的。</p>

<h2>Solr的优缺点</h2>

<h3>优点</h3>

<ol>
<li>Solr有一个更大、更成熟的用户、开发和贡献者社区。</li>
<li>支持添加多种格式的索引，如：HTML、PDF、微软 Office 系列软件格式以及 JSON、XML、CSV 等纯文本格式。</li>
<li>Solr比较成熟、稳定。</li>
<li>不考虑建索引的同时进行搜索，速度更快。</li>
</ol>


<h3>缺点</h3>

<ol>
<li>建立索引时，搜索效率下降，实时索引搜索效率不高。</li>
</ol>


<h2>Elasticsearch与Solr的比较<a href="http://blog.socialcast.com/realtime-search-solr-vs-elasticsearch/"><sup>*</sup></a></h2>

<p>当单纯的对已有数据进行搜索时，Solr更快。</p>

<p><img src="/images/search_fresh_index_while_idle.png" alt="Search Fesh Index While Idle" /></p>

<p>当实时建立索引时, Solr会产生io阻塞，查询性能较差, Elasticsearch具有明显的优势。</p>

<p><img src="/images/search_fresh_index_while_indexing.png" alt="search_fresh_index_while_indexing" /></p>

<p>随着数据量的增加，Solr的搜索效率会变得更低，而Elasticsearch却没有明显的变化。</p>

<p><img src="/images/search_fresh_index_while_indexing2.png" alt="search_fresh_index_while_indexing" /></p>

<p>综上所述，Solr的架构不适合实时搜索的应用。</p>

<h2>实际生产环境测试<a href="http://blog.socialcast.com/realtime-search-solr-vs-elasticsearch/"><sup>*</sup></a></h2>

<p>下图为将搜索引擎从Solr转到Elasticsearch以后的平均查询速度有了50倍的提升。</p>

<p><img src="/images/average_execution_time.jpg" alt="average_execution_time" /></p>

<h2>Elasticsearch 与 Solr 的比较总结</h2>

<ul>
<li>二者安装都很简单；</li>
<li>Solr 利用 Zookeeper 进行分布式管理，而 Elasticsearch 自身带有分布式协调管理功能;</li>
<li>Solr 支持更多格式的数据，而 Elasticsearch 仅支持json文件格式；</li>
<li>Solr 官方提供的功能更多，而 Elasticsearch 本身更注重于核心功能，高级功能多有第三方插件提供；</li>
<li>Solr 在传统的搜索应用中表现好于 Elasticsearch，但在处理实时搜索应用时效率明显低于 Elasticsearch。</li>
</ul>


<p>Solr 是传统搜索应用的有力解决方案，但 Elasticsearch 更适用于新兴的实时搜索应用。</p>

<h2>其他基于Lucene的开源搜索引擎解决方案<a href="http://mail-archives.apache.org/mod_mbox/hbase-user/201006.mbox/%3C149150.78881.qm@web50304.mail.re2.yahoo.com%3E"><sup>*</sup></a></h2>

<ol>
<li>直接使用 <a href="http://lucene.apache.org">Lucene</a></li>
</ol>


<p> 说明：Lucene 是一个 JAVA 搜索类库，它本身并不是一个完整的解决方案，需要额外的开发工作。</p>

<p> 优点：成熟的解决方案，有很多的成功案例。apache 顶级项目，正在持续快速的进步。庞大而活跃的开发社区，大量的开发人员。它只是一个类库，有足够的定制和优化空间：经过简单定制，就可以满足绝大部分常见的需求；经过优化，可以支持 10亿+ 量级的搜索。</p>

<p> 缺点：需要额外的开发工作。所有的扩展，分布式，可靠性等都需要自己实现；非实时，从建索引到可以搜索中间有一个时间延迟，而当前的“近实时”(Lucene Near Real Time search)搜索方案的可扩展性有待进一步完善</p>

<ul>
<li><a href="http://katta.sourceforge.net">Katta</a></li>
</ul>


<p> 说明：基于 Lucene 的，支持分布式，可扩展，具有容错功能，准实时的搜索方案。</p>

<p> 优点：开箱即用，可以与 Hadoop 配合实现分布式。具备扩展和容错机制。</p>

<p> 缺点：只是搜索方案，建索引部分还是需要自己实现。在搜索功能上，只实现了最基本的需求。成功案例较少，项目的成熟度稍微差一些。因为需要支持分布式，对于一些复杂的查询需求，定制的难度会比较大。</p>

<ul>
<li><a href="http://svn.apache.org/repos/asf/hadoop/mapreduce/trunk/src/contrib/index/README">Hadoop contrib/index</a></li>
</ul>


<p> 说明：Map/Reduce 模式的，分布式建索引方案，可以跟 Katta 配合使用。</p>

<p> 优点：分布式建索引，具备可扩展性。</p>

<p> 缺点：只是建索引方案，不包括搜索实现。工作在批处理模式，对实时搜索的支持不佳。</p>

<ul>
<li><a href="http://sna-projects.com">LinkedIn 的开源方案</a></li>
</ul>


<p> 说明：基于 Lucene 的一系列解决方案，包括 准实时搜索 zoie ，facet 搜索实现 bobo ，机器学习算法 decomposer ，摘要存储库 krati ，数据库模式包装 sensei 等等</p>

<p> 优点：经过验证的解决方案，支持分布式，可扩展，丰富的功能实现</p>

<p> 缺点：与 linkedin 公司的联系太紧密，可定制性比较差</p>

<ul>
<li><a href="https://github.com/tjake/Lucandra">Lucandra</a></li>
</ul>


<p> 说明：基于 Lucene，索引存在 cassandra 数据库中</p>

<p> 优点：参考 cassandra 的优点</p>

<p> 缺点：参考 cassandra 的缺点。另外，这只是一个 demo，没有经过大量验证</p>

<ul>
<li><a href="https://github.com/akkumar/hbasene">HBasene</a></li>
</ul>


<p> 说明：基于 Lucene，索引存在 HBase 数据库中</p>

<p> 优点：参考 HBase 的优点</p>

<p> 缺点：参考 HBase 的缺点。另外，在实现中，lucene terms 是存成行，但每个 term 对应的 posting lists 是以列的方式存储的。随着单个 term 的 posting lists 的增大，查询时的速度受到的影响会非常大</p>
]]></content>
  </entry>
  
</feed>
